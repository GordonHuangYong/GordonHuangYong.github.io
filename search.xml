<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[码率与采样率]]></title>
    <url>%2F2018%2F05%2F11%2F%E7%A0%81%E7%8E%87%E4%B8%8E%E9%87%87%E6%A0%B7%E7%8E%87%2F</url>
    <content type="text"><![CDATA[采样位数——可以理解数字音频设备处理声音的解析度，即对声音的辨析度。就像表示颜色的位数一样（8位表示256种颜色，16位表示65536种颜色），有8位，16位，24位等。这个数值越大，解析度就越高，录制和回放的声音就越真实。 采样频率——就是对声音信息1秒钟采样多少次，以记录成数字信息。如CD音频是44.1KHz采样率，它对声音以每秒44100次的频率来记录信息。原则上采样率越高，声音的质量越好。 比特率(码率)——表示单位时间（1秒）内传送的比特数bps（bit per second，位/秒）的速度。作为一种数字音乐压缩效率的参考性指标，通常使用kbps（通俗地讲就是每秒钟1024比特）作为单位。 码率(kbps)=(采样率位深声道)/8 文件大小(kb) = 码率 * 时长(s) 参考:音频采样位数，采样率，比特率]]></content>
  </entry>
  <entry>
    <title><![CDATA[手机语音识别的应用和前景]]></title>
    <url>%2F2018%2F04%2F28%2F%E6%89%8B%E6%9C%BA%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%9A%84%E5%BA%94%E7%94%A8%E5%92%8C%E5%89%8D%E6%99%AF%2F</url>
    <content type="text"><![CDATA[!xupload successful 不是什么产品都可以与语音识别配合.当前语音识别技术的缺点, 概括来说就是一句话, 识别效果容易受使用环境影响, 未能满足自然交互的体验. 目前业内普遍宣称的97%识别准确率，更多的是人工测评结果，只在特定的场合中才能实现。主要有以下几个缺点: 第一，交互距离要近; 第二，发音必须标准; 第三，环境必须安静; 第四，人机不能持续对话。 由于具有种种缺点, 语音识别技术必须需要结合特定的应用场景，产品才能得到应用和推广, 而不是任意产品, 都可以加上语音识别的. 比如说:车载产品, 由于人在车内双手和双眼被占用，而需求又十分明确，因此智能语音成了这一场景下最合适的交互方式。但语音交互效果不好，容易出错, 目前用户体验并不十分理想. 另一方面, 不是什么产品都需要语音识别的.一些传统家电，如空调、冰箱、洗衣机、抽油烟机等,无论是控制开关、调节设置，还是对话沟通，从现有技术水平所能解决的需求和效率来看，都价值有限，或许等到语音交互成本下降，效率提升，才有可能在各种家电终端上普及。 根据观察了解, 无论在哪个领域做语音交互技术，都必须要满足几个要求： 第一,要满足用户刚需; 第二,不一定是高频使用，但在某一场景能让用户形成依赖性; 第三,语音技术背后一定要有第三方的内容和服务作支持，因为它只是一种交互手段; 语音只是一个交互的手段，而不是一种功能。现在的语音还没有达到全国人民普及的程度，但未来一定会实现。而这一手段，其背后第三方的内容和服务是比语音本身更重要的东西。 最后，交互体验一定要好。 语音识别能力细分 命令词识别 声纹识别 方向识别 距离识别 语音合成 语义理解 长时间连续识别 短时间短句识别 远场识别 近场识别 智能对话 当前手机语音识别的优缺点手机语音识别系统产品, 自身不具备语音识别功能, 其必须接入手机, 利用手机APP上的语音识别功能, 进行语音识别.具有词条数量大, 修改方便, 方便切换语言等优点. 其主要定位于C端消费级产品, 比较注重用户体验.主要功能是:用户发出语音命令词, app识别后, 给设备发出控制指令.主要应用的语音技术有:语音合成,长时间连续的,近场的,短句命令词识别. 优点 词条数量无限制 词条修改方便, 开发周期短 支持多种语言, 随时切换 抗噪能力强 误识别率低. 识别率高. 可以对设备下达说话, 也可以对手机说话. 免除语音识别模块,节省成本. 可以录音,保存声音. 后台唤醒APP, 后台运行.无须用户操作. 缺点 需要联网工作, 受网络影响. 长时间在手机后台运行, 耗电量大. 最多支持4个设备同时连接到手机,数量受限 语音识别距离短 需要得到手机识别引擎厂商的授权, 授权费用高. 摇动手机进入识别状态(耗电大) 适用场景 环境嘈杂的地方也无问题. 设备或手机离人比较近的时候 网络状况比较好地方. 不用担心电量问题的时候或有适当的唤醒时机的设备. 词条比较多的设备 手机语音识别的应用场景综上所述, 我 车载环境用品 开车一般都不方便, 需要使用语音控制. 车上噪音比较大. 一般都会充电使用. 设备数量不多. 使用距离短. 在偏僻的地方, 网络不好.影响使用*.X 成人用品, 儿童玩具, 这类产品在使用时, 可以增加语音互动.提高用户的兴趣和体验. 不需要唤醒, 一般开机后即马上使用, 使用时即处于识别状态. 使用时间不长. 耗电不明显.亦可边充边用. 使用距离短. 使用环境处于私人空间, 网络一般比较好. 可修改词条, 成人用品可增加情趣, 玩具可锻炼小孩子说话沟通能力. 可更换语音, 有强大的后台语音库下载更换. 可以大人可以模仿玩具回答, 和小孩子问答?(伪人工智能?) 眼部按摩 用户在使用时, 眼睛是闭上的, 不方便动手操作.可以解决这方面的问题. 智能家居普通家庭中都会有很多需要红外遥控器控制的家电，由于红外线传输会受到空间位置影响，并且过多遥控器会导致使用不便的问题，为解决这些问题，于是设计一个可将多个遥控设备集中于一体并且可以通过声音控制其常用功能的集成设备由于摇动唤醒需要消耗手机大量的电量, 此方案暂不考虑. 语音电子病历医生双手在不方便时, 使用口述录入病历.目前科大讯飞有这方面的产口.可参考 手机语音识别发展方向手机语音识别作为一个平台发展, 是正确的. 但是切入方向不对.建议先做一个针对某个产品的APP, 快速迭代升级发展, 同时, 吸取新的技术和市场信息, 及时调整方向.而一开始就想做一个万能的APP, 可以接入所有厂商,所有类型的设备, 在技术缺乏积累, 市场方向不明的情况下,风险是很大的, 目前来说, 已经在这上面消耗了大量的时间和资源, 但仍然没有产出, 而且, 由于作为平台, 考虑的因素比较多, 在调整方向上比较难, 有些东西已经固化, 比较难以解决. 而反观录音耳机项目,由于功能专一,明确目前已经是可以期待出成果的了. 参考文档 语音识别结合应用场景：未来可期 如今国内语音识别行业发展是何局势?]]></content>
  </entry>
  <entry>
    <title><![CDATA[Cmd Markdown示例]]></title>
    <url>%2F2018%2F03%2F23%2FCmd-Markdown%E7%A4%BA%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[欢迎使用 Cmd Markdown 编辑阅读器 来源:https://www.zybuluo.com/mdeditor 可以看到原生的markdown还是不如其它家扩展的功能. markdown没有统一标准是硬伤. 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 [ ] 支持以 PDF 格式导出文稿 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [x] 新增 Todo 列表功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \$1600 5 手机 \$12 12 管线 \$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[公式显示不正常,已修正]]></title>
    <url>%2F2018%2F03%2F23%2Ftest%2F</url>
    <content type="text"><![CDATA[在themes/next/_config.yml文件中,找到这个 12345# MathJax Supportmathjax: enable: true #per_page: true cdn: //cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js? 公式示例: 1: $$ lim_{1\to+\infty}P(|\frac{1}{n}\sum_i^nX_i-\mu|&lt;\epsilon)=1, i=1,…,n$$ 2: \begin{equation}\begin{bmatrix}1 &amp; 2 &amp; 3 \4 &amp; 5 &amp; 6 \7 &amp; 8 &amp; 9\end{bmatrix}+\begin{bmatrix}10 &amp; 11 &amp; 12 \13 &amp; 14 &amp; 15 \16 &amp; 17 &amp; 18\end{bmatrix}=\begin{bmatrix}11 &amp; 13 &amp; 15 \17 &amp; 19 &amp; 21 \23 &amp; 25 &amp; 27\end{bmatrix}\end{equation}]]></content>
      <tags>
        <tag>公式</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多机更新 Hexo 博客]]></title>
    <url>%2F2018%2F03%2F22%2F%E5%A4%9A%E6%9C%BA%E6%9B%B4%E6%96%B0-Hexo-%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[| 其实在另外一台电脑上更新 Hexo 博客，其实就是用 Hexo 搭建博客的简化版，区别只是在于在 Github 上你博客的 repo 已经有了，不需要再重新创建，只要把新电脑的 SSH Key 添加一下就好。其他的 Hexo 安装、KaTeX 等插件的安装配置，该怎么样还是怎么样。 | Source 多机更新 Hexo 博客 | Grok因为博客长时间不更新的事，最近被 L 叔点名批评了。过年回家，我又把已经在寝室吃了整整一年灰的笔记本给挖出来了，打算过年期间把过去一个多月的欠账给补上。但之前的 Hexo + Github Pages 的博客生产环境是部署在实验室的台式机上的，现在在笔记本上该怎么重新配置生产环境呢？这篇文章就是记录一下这个问题的解决步骤。 1. 动手前的思考还是按照我个人的老习惯，在动手前，先来理清思路，看看我们大概需要做哪些操作，为什么要做这些？这篇文章默认读者已经在另外一台电脑上部署好了，现在只是需要在另外一台电脑上部署。如果读者关注的只是如何使用 Hexo + Github Pages 搭建自己的博客，可以移步我之前的一篇文章 《知行合一 | 用 Hexo 搭建博客》。 既然博客的生产环境是 Hexo + Github Pages，那么重部署的工作就围绕着 Hexo 和 Github Pages 展开。回顾一下，两者在我们搭建博客的时候具体扮演着什么角色。 Hexo：是一个静态博客生成器，根据给定的主题，负责把写好的 Markdown 文章转换成一堆 HTML + CSS + Javascript 页面。另外，Hexo 还有把生成好的站点上传到 Github Pages 的功能。 Github Pages：这是我们的网站内容（那一堆 HTML + CSS + Javascript）真正存放的地方。 Hexo 是把 Markdown 转换成 HTML 的，那么首先，需要给 Hexo 提供 Markdown 文件。由于，我希望打开任何一台电脑都能更新最新的容，Hexo 博客的内容应该放到一个同步盘的文件夹下面，坚果云、Dropbox、OneDrive 这些都行。其次，Hexo 是基于 Node.js 的，但笔记本上完全没有 Node.js 环境，所以需要安装 Node.js。还有，很多文章都会用到类似 hexo-katex 这样的插件，新电脑上也没安装，需要安装这些必须的插件。 对于 Github Pages，最大的问题在于告诉 Github 服务器，这次的提交更改不是别人，也是由我做出的，所以一定要接受我的改动。在《知行合一 | 用 Hexo 搭建博客》中我已经讲过了，这个身份认证是由 SSH Key 来完成的，在重新部署中，我们还是要弄这个。 2. 重部署流程2.1 文件同步要把整一个 your_name.github.io 文件夹同步过来，里面包含的 .gitignore 等文件包含了等下要提交的文件对应哪个 repo 等的信息，还有 2.2 Hexo 配置因为笔记本上完全没有 Hexo 环境，所以我们还要重新部署下，根据《知行合一 | 用 Hexo 搭建博客》步骤大体如下。 先安装 Node.js 和 Git，再安装完这两者后，再打开 Node.js command prompt 安装 Hexo。但由于 Node.js 官方的源安装速度非常慢，我们先将源改成国内淘宝的镜像，执行： | —– || 1 | npm config set registry &quot;https://registry.npm.taobao.org&quot; | cd 到同步的 your_name.github.io 内， 然后再安装 Hexo： 安装完后，可以对比下新电脑里your_name.github.io 文件夹下面的 package.json 里面的插件和老电脑里的package.json 插件列表有什么不同，把缺的插件统统装一遍就可以了。这个就需要在同步前，也就是在敲npm install -g hexo-cli 前就把老电脑里的插件信息另存为。可惜我当时没想到这一点，不过我就额外安装过 Noise 主题和 hexo-katex 插件，所以根据我另外一篇文章 《Hexo 博客支持 KaTeX（回炉版）》，还需要执行如下命令： 1 npm install hexo-renderer-pandoc --save 2 npm install hexo-katex --save 由于 hexo-renderer-pandoc 插件会调用 pandoc，所以还需要先去下载安装 Padoc。为了 Noise 主题，执行 | —– || 1 2 | npm install hexo-renderer-jade --save npm install hexo-renderer-less --save | 为了部署，还要执行 | —– || 1 | npm install hexo-deployer-git --save | 至此，在新的平台上运行 hexo clean，hexo generate ，hexo server 等命令应该就没有问题了。 2.3 Github 配置这一环节，其实同《知行合一 | 用 Hexo 搭建博客》一样，唯一的差别就是省去了创建 repo 这一环节，因为我们的 repo 是同步过来的。具体步骤如下，更详细的解释可以看《知行合一 | 用 Hexo 搭建博客》一文： Step 1：Setting up Git。在 Git Bash 中执行如下代码即可： | —– || 1 2 | git config --global user.name &quot;YOUR NAME&quot; git config --global user.email &quot;YOUR EMAIL ADDRESS&quot; | 其中，YOUR NAME 是自己取的名字，YOUR EMAIL ADDRESS 是自己的 Github 邮箱。 Step 2：Authenticating with GitHub from Git。 在 Git Bash 下执行如下命令，生成 SSH key | —– || 1 | ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; | 其中，your_email@example.com 是你的 Github 注册邮箱，剩下的一路回车即可。 * 将 SSH key 添加到 ssh-agent * 将 SSH key 添加到 Github 账户 * 在 Git Bash 中将 SSH Key 拷贝出来： | —– || 1 | clip &lt; ~/.ssh/id_rsa.pub | * 此时，SSH Key 已经在我们的剪切板里了。然后登录 Github 帐号，依次点击自己的头像，**Settings**，**SSH and GPG keys**， **Add SSH key**， 在 **Title** 这里输入 Key 的label，比如 `your_name - PC`，然后在 Key 里面把 **SSH Key** 粘贴进去，点击 **Add SSH key** 大功告成。 * 测试 SSH 连接，在 Git Bash 中敲入 应该可以看到提示你成功的信息。 Hexo 部署：*执行hexo deploy 应该就可以大功告成了。 3. 动手后的再思考这篇文章写到这里，发现写的内容基本都是上一篇《知行合一 | 用 Hexo 搭建博客》内容的重复，也就是说多台电脑同时更新的问题，并不是一个完全不同的问题，绝大部分其实都是可以复用的。最初，让我困惑的并不是这些操作步骤，而是如何正确的刨分这个问题，哪些是我熟悉的，哪些是我陌生的。其实，这篇文章主要想讲两点： 仅仅将那些插件文件同步，并不等于安装了那些插件，所以我们才需要在新电脑上安装 hexo-katex 等插件； 只要将新电脑的 SSH key 添加到 Github 的项目里面，就通过了身份认证。]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo使用日志]]></title>
    <url>%2F2018%2F03%2F22%2FHexo%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[后台http://localhost:4000/admin/ 用户:137**3 密码:z*15 html转markdown直接在网上转码http://markdownrules.com/ http://heckyesmarkdown.com/ https://domchristie.github.io/turndown/ 或者使用本地工具read2text,命令: read2text http://brettterpstra.com/keybinding-madness/ | pbcopy 工具官网:http://brettterpstra.com/2012/01/04/scripting-readability-markdownify-for-clipping-web-pages/ 插入图片:sourcetag_dir/img目录下直接放入图片, 进行引用/img/xx.png 或者直接在后台复制,粘贴,图片自动放进了sourcetag_dir/images/目录.并且显示引用. 删除文章时,图片不能自动删除.需要手动处理. 发布到github.在后台 http://localhost:4000/admin/直接点击desploy即可 发布到https://gordonhuangyong.github.io/ 最好还是用hexo g -d. 后台操作目前无法删除文章]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 安装使用说明2]]></title>
    <url>%2F2018%2F03%2F22%2FHexo-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E2%2F</url>
    <content type="text"><![CDATA[Source mac上hexo博客的搭建 - CSDN博客​ 第一篇hexo博客，介绍了在mac上搭建hexo博客的全过程。包括：准备工作、本地站点的建立、启动和部署站点、创建新文章、发布到github、更换主题 和 绑定域名。在介绍之前先秀一波我搭的成果: 夏天的风的博客 准备工作 github homebrew node.js 和 npm hexo github1、github账号 ​ 这部分略过，没有的话自己注册一个。然后将mac上的公钥添加到github上去。 2、建立仓库 ​ 严格按照 git用户名.github.io 来命名。我这里就叫：xiaqunfeng.github.io 。 homebrewhomebrew 是MAC OSX 上面用来安装 或者 卸载软件用的非常方面的一个软件。在终端上执行如下命令即可安装，参考官网。 sudo /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; node.js不推荐使用 brew 安装node， 直接从官网下载，然后双击安装。我这里选择的版本是：v6.9.3 LTS。node.js 集成带有npm。 $ node -v v6.9.3 $ npm -v 3.10.10 hexo$ sudo npm install hexo-cli -g 安装完后 $ hexo -v hexo: 3.2.2 hexo-cli: 1.0.2 os: Darwin 16.1.0 darwin x64 http_parser: 2.7.0 node: 6.9.3 v8: 5.1.281.89 uv: 1.9.1 zlib: 1.2.8 ares: 1.10.1-DEV icu: 57.1 modules: 48 openssl: 1.0.2j hexo命令行使用常用命令： hexo help #查看帮助 hexo init #初始化一个目录 hexo new &quot;postName&quot; #新建文章 hexo new page &quot;pageName&quot; #新建页面 hexo generate #生成网页，可以在 public 目录查看整个网站的文件 hexo server #本地预览，&apos;Ctrl+C&apos;关闭 hexo deploy #部署.deploy目录 hexo clean #清除缓存，强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹 简写： hexo n == hexo new hexo g == hexo generate hexo s == hexo server hexo d == hexo deploy 建立本地站点执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。（文件夹不需要提前建好，会自行创建） $ hexo init $ cd $ npm install 新建文件夹目录如下： . ├── .deploy #需要部署的文件 ├── node_modules #Hexo插件 ├── public #生成的静态网页文件 ├── scaffolds #模板 ├── source #博客正文和其他源文件 | ├── _drafts #草稿(刚开始没有) | └── _posts #文章 ├── themes #主题 ├── _config.yml #全局配置文件 └── package.json 启动站点执行 hexo server 启动站点 $ hexo s INFO Start processing INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 在浏览器中输入： 就可以看到站点了。 部署站点编辑文件 _config.yml ，修改如下： deploy: type: git repository: https://github.com/xiaqunfeng/xiaqunfeng.github.io.git branch: master 注意：冒号后面要留 空格！！ 创建新文章方法1、hexo n创建新文章 $ hexo n &quot;我的第一篇hexo博客&quot; INFO Created: ~/hexo-blog/source/_posts/我的第一篇hexo博客.md 然后用编辑器打开编辑即可。 方法2、直接在 source/_posts 中新建一个md文件，进行编辑 在hexo-blog文件夹下执行： hexo g hexo s 然后在浏览器中输入http://localhost:4000就可以看到新加的文章了。 发布执行 hexo d ，发现如下问题 $ hexo d ERROR Deployer not found: git 解决方法 $ npm install hexo-deployer-git --save hexo-site@0.0.0 /Users/xiaqunfeng/hexo-blog └── hexo-deployer-git@0.2.0 再执行 hexo d $ hexo d INFO Deploying: git INFO Clearing .deploy_git folder... INFO Copying files from public folder... On branch master nothing to commit, working tree clean Username for &apos;https://github.com&apos;: xiaqunfeng Password for &apos;https://xiaqunfeng@github.com&apos;: To https://github.com/xiaqunfeng/xiaqunfeng.github.io.git * [new branch] HEAD -&gt; master Branch master set up to track remote branch master from https://github.com/xiaqunfeng/xiaqunfeng.github.io.git. INFO Deploy done: git 输入github的用户名和密码即可。此时，博客已经完全搭建起来了。 在浏览器中输入： 即可访问。 预览如下： 更换主题自己google一下hexo主题，选一个自己喜欢的，然后git clone下来。比如 Next 主题 $ git clone https://github.com/iissnan/hexo-theme-next.git 然后打开_config.yml文件，替换其中的 theme 属性，默认为 landscape。 theme: next 本地调试$ hexo g $ hexo s 发布到github1、清理之前生成的内容，即public文件。 注意：这一步必须要，不然有时因为缓存问题，服务器更新不了主题 $ hexo clean 2、生成静态文件并部署到github $ hexo g $ hexo d 上面两个命令可以合并为一个： $ hexo d -g 绑定域名 我暂时还没购买和绑定域名，就暂时先简单介绍一下，后续再来补充完善。 1、购买域名 某乎这里有各种推荐，自己可以参考的看看。 godaddy地址: https://www.godaddy.com 阿里云域名地址: http://wanwang.aliyun.com 2、到自己的gitHubPages的ip地址 ping http://xiaqunfeng.github.io PING github.map.fastly.net (151.101.192.133): 56 data bytes 64 bytes from 151.101.192.133: icmp_seq=0 ttl=49 time=62.670 ms 64 bytes from 151.101.192.133: icmp_seq=1 ttl=49 time=65.062 ms ... 这里IP地址为：151.101.192.133 3、域名绑定IP地址 登录自己购买域名的地方，找到域名相关选项 添加域名 添加记录：一个主机记录 @， 一个为www，记录值都是博客主页对应的ip。 等待生效，最迟72小时生效，然后就可通过域名浏览你的博客主页了。]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手机语音识别]]></title>
    <url>%2F2017%2F07%2F13%2F%E6%89%8B%E6%9C%BA%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%2F</url>
    <content type="text"><![CDATA[蓝牙实体按键, 一键打开屏幕锁功能功能描述: 开发一个蓝牙设备样机, 此设备有一个按键.用户点击指定的实体按键, 设备则自动输入手机的屏幕锁密码, 解锁屏幕.屏幕锁密码, 事先由用户设置, 设置保存在蓝牙设备里. 或者保存在用户手机中. 外包处理: 出于保密考虑,我们外包需要产出的是一个模块. 这个模块是在蓝牙模块上, 增加一个串口, 蓝牙模块使用此串口接收数据. 此模块可以同时使用键盘和鼠标发码标准, 控制手机. 外包商需要提供键盘和鼠标的发码协议, 以供测试. 我们需要搜集供应商的产品, 了解蓝牙模块的参数, 功能, 价格, 其产品的应用场景等. (音频蓝牙, 数据蓝牙, HID蓝牙, ibeacon蓝牙等). 了解供应商所能提供的服务, 文档资料是否齐全, 技术支持是否及时, 其所在距离是否方便出差. 一键解屏暂时不需要考虑双向通讯,先作一个简单的小产品. 数据传输的流程是: 串口-&gt;蓝牙模块-&gt;手机 自主研发: 了解HID, HOG的内容. 搜集各个键值对应的功能.最重要的是, 上滑, 下滑, 右滑, 左滑, 长按打开siri等. 实现调用手机系统搜索,打开APP 如何保存和读取屏幕锁密码.(声波,光波,数据蓝牙?) APP设置功能 成品功能扩展 一键打开指定的APP, 安卓语音助手, 苹果siri, 第三方的灵犀助手等. 集成离线声纹解锁功能. 快速解开屏幕锁功能.了解主流手机系统是否有 外设 解除屏幕锁接口. 语音识别APP功能描述 根据连接成功的设备, 查询得到设备类型, 根据不同的设备类型, 显示不同的设置参数. 设置解锁屏幕的密码到设备 设置解锁屏幕的声纹到设备. 设置开始识别语音的唤醒词. 设置开始识别语音的实体按键. 设置实体按键要打开的APP, 安卓语音助手, 苹果siri, 第三方的灵犀助手等. 接收设备发出的语音和按钮指令 把语音转成文字, 发给蓝牙设备.蓝牙设备执行指令. 原型]]></content>
  </entry>
  <entry>
    <title><![CDATA[产品前期]]></title>
    <url>%2F2017%2F06%2F29%2F%E4%BA%A7%E5%93%81%E5%89%8D%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[市场分析通过市场调研、竞品分析等手段确定市场需求的缺口，进而初步确定自己的产品定位。 市场调研 竞品功能分析 首先确定产品领域，然后找到该领域中排名前三的产品进行分析 竞品用户分析 竞品的优点要吸取并能有所改进，竞品的缺点要明白并避免犯同样错误 产品立项初步确定产品定位之后，要进行一系列的论证，从而确定自己产品要解决什么问题，达成什么目标 产品定位 产品定位就是一句话描述你的产品，产品功能就是清楚知道产品解决的是什么问题。 产品功能 目标用户分析 分析目标用户特点（年龄、收入情况等）、用户技能特征（电脑办公能力、外语能力等）、用户使用产品场景。 确立产品目标 域名备案、商标、法律帮助等永远不要小看产品的这些配套设施，这是产品的身份证，某些情况下还是产品的护身符。 域名注册 网站类项目确立之后要注册域名并备案，域名要和项目性质匹配并且简单易记。非网站类项目（如：手机APP）也可以不注册域名。 商标 商标是企业专属权的标志，并且受法律保护，一定要重视。相关案例&gt;&gt; 细节能打败未来，盘点商标战争给创业者的深刻警示 法律帮助 了解相关法律条款，避免引起不必要的法律纠纷。 制定产品需求文档阐明产品基本信息 目的 一方面为接下来定产品整体框架做准备，另一方面辅助服务端技术人员创建数据库并选择服务器。 方式 文本形式、思维导图形式, 例如：Visio、 MindManager、 Word 更多工具&gt;&gt; 确定产品流程框架流程是以用户的角度来看待产品，模拟用户在使用过程中应该如何操作。 需求文档还包含着产品的业务逻辑，业务逻辑是辅助技术人员完成产品功能。 目的 将脑海中的想法逐渐梳理成有逻辑有流程的框架 方式 流程图, 例如：Visio、 MindManager、 Word 更多工具&gt;&gt; 完成产品原型设计这是产品流程、业务逻辑、功能逻辑最直观的表示，它反映出你对产品是否有清晰的认识。 目的 将抽象的文字或流程输出成直观的网站雏形，让各个部门的人都可以清楚明白 方式 线框图、 手绘原型、灰模原型、交互原型（DEMO版）例如: Axure RP、Balsamiq Mockups UIDesigner（部分） 整理并完成产品需求文档产品需求文档要配备相应的功能说明，让技术人员可以清楚的明白你的需求，保证项目的顺利进行，以免出现返工。 方式 Word——结构图、全局说明、频道功能、效果图 图片——在图片上进行标注，并配备全局功能说明 交互原型——更方便，可以导出功能文档]]></content>
  </entry>
  <entry>
    <title><![CDATA[iTime GPRS 产品说明书]]></title>
    <url>%2F2017%2F06%2F23%2FiTime-GPRS-%E4%BA%A7%E5%93%81%E8%AF%B4%E6%98%8E%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[产品特点功能特点 产品使用2G网络, 可使用APP进行远程控制. 特别适合不需要网线, 没有WiFi的场景.(当地网络运营商必须支持gsm网络制式). 控制插座, 实时显示用电器功率, 实时显示温度(需要单独购买温度传感器) 可自定义, 多个时段的定时任务进行精准控制 . 采用流行的MQTT物联网协议, 产品可扩展性强. APP支持Android, iOS系统. 产品规格与包装规格参数 规格 参数 工作电压 AC 100～250V WIFI标准 centered 壳体材料 ABS阻燃 额定电流 10A /250VAC 使用环境 仅限于室内使用，相对湿度小于95% 产品大小 长x宽x高 = 115x62x29(高度不含插头) 包装清单插座x1, 说明书x1.(不包含温度传感器, 如果需要, 请单独购买) 产品实例介绍 按键操作说明 按键 操作 作用 开关键 短按 打开/关闭插孔电源输出 开关键 长按6秒~8秒 必须在网络指示灯快闪连上服务器之后执行此操作，此操作为恢复出厂设置，清除所有数据 重启键 短按 重启设备 指示灯意义说明 颜色 状态 意义 红灯 长亮 在开关键长按6秒后，红色指示灯会亮起，表示正在恢复出厂设置，清除设备所有数据 绿灯 慢闪 等待SIM卡注册到网络 绿灯 快闪 已经连接上了服务器，可以进行远程控制 注意事项避免不必要伤害, 应始终遵守基本的安全预防措施. 本产品适合常规室内环境使用, 请勿安装在易燃易爆危险场所, 插入或拔下插头时, 产生的火花容易引起爆炸或起火. 请按说明书要求, 插在相应的供电插座上, 供电的插座电压应该在AC 100～250V ;过高电压会烧坏内部元件造成本产品损坏, 过低电压会使本产品不工作. 本产品为无防水设计, 投入水中会造成产品漏电. 本产品安装在小孩或宠物接触不到的地方, 避免小孩或宠物当成玩具品, 造成不必要的触电危险. 内部有高压电路设计, 严禁非专业人员私自拆开机器. 免责声明本产品只提供电源插座, 对被供电设备电器, 给予控制通电或关电, 对被供电的设备电器可能的安全问题不予负责, 请用户使用前检查所被供电的设备电器是否能安全使用. 因为本产品所连接设备电器, 可能因个人使用其中的远程控制或定时设置功能而随时供电, 请用户注意当设备被供电时, 不会因此造成人员伤害或财产损失, 我们不承担由此造成的任何责任和后果.]]></content>
  </entry>
  <entry>
    <title><![CDATA[安卓推送通知]]></title>
    <url>%2F2017%2F06%2F09%2F%E5%AE%89%E5%8D%93%E6%8E%A8%E9%80%81%E9%80%9A%E7%9F%A5%2F</url>
    <content type="text"><![CDATA[B、MQTT协议实现Android推送 采用MQTT协议实现Android推送功能也是一种解决方案。MQTT是一个轻量级的消息发布/订阅协议，它是实现基于手机客户端的消息推送服务器的理想解决方案。 wmqtt.jar 是IBM提供的MQTT协议的实现。我们可以从这https://github.com/tokudu/AndroidPushNotificationsDemo 下载该项目的实例代码，并且可以找到一个采用PHP书写的服务器端实现https://github.com/tokudu/PhpMQTTClient C、RSMB实现推送功能 Really Small Message Broker (RSMB) ，是一个简单的MQTT代理，同样由IBM提供，其查看地址是：http://www.alphaworks.ibm.com/tech/rsmb 缺省打开1883端口，应用程序当中，它负责接收来自服务器的消息并将其转发给指定的移动设备。SAM是一个针对MQTT写的PHP库。 上面两个php都用到了SAM库.php异步框架:http://pecl.php.net/package/sam/download/ 建议还是使用第三方推送. 在内存低的时候，后台服务会被杀掉。 锁屏时间久了，后台服务也会被杀掉。 具体的意思见： Android开发之如何保证Service不被杀掉[（broadcast+system/app）](http://blog.csdn.net/mad1989/article/details/22492519) 另外, 自己做还需要兼容新的谷歌标准(GMS)和国内标准. [工信部放大招：将统一 Android 消息推送标准](http://www.oschina.net/news/85467/unified-android-messaging-standard) [本土安卓阵营要打造推送标准？你应看到这些](http://www.duanxinmi.com/61fditc620170605c6n495714696.html)]]></content>
  </entry>
  <entry>
    <title><![CDATA[404.html]]></title>
    <url>%2F2017%2F06%2F07%2F404-html%2F</url>
    <content type="text"></content>
      <categories>
        <category>404</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo 安装使用说明1(安装后台管理)]]></title>
    <url>%2F2017%2F06%2F07%2FReacNative%2F</url>
    <content type="text"><![CDATA[An admin UI for the Hexo blog engine. Based off of the Ghost interface, with inspiration from svbtle and prose.io. Hexo VersionFor 2.x, use version 0.3.0 of this plugin. Version 1.x and beyond onlysupport Hexo v3.x. Contents Screenshots Quickstart Credits Local use vs deploymentThis plugin was originally designed as a local editor – you run hexo locally, use hexo-admin to author posts, and then use hexo generate or hexo deploy to send the generated static HTML files up to github pages or some other static server. However, hexo-admin can be run on your live blog, as long as you’re using a non-static hosting service such as Heroku, DigitalOcean, etc. Static hosting services such as Github pages and Surge.sh does not support running hexo-admin from your live site.If you’re using Hexo admin from your live blog, you should definitely set up a password (see below) – otherwise anyone will be able to edit your content. Screenshots Quickstart1. Setup hexo &amp; create a blog12345npm install -g hexocd ~/hexo init my-blogcd my-blognpm install 2. Install the admin &amp; start things up123npm install --save hexo-adminhexo server -dopen http://localhost:4000/admin/ 3. Profit!The UI should be pretty discoverable – let me know if you can’t find something. 4. Password protectionIf you’re using Hexo admin on your live server, you want some passwordprotection. To enable this, you just add a few config variables to your hexo_config.yml: 1234admin: username: myfavoritename password_hash: be121740bf988b2225a313fa1f107ca1 secret: a secret something The password_hash is the bcrypt hash of your password. The secret is usedto make the cookies secure, so it’s a good idea to have it be long andcomplicated. A utility in Hexo admin’s Settings can hash your password and generate the adminsection for you. Start Hexo and go to Settings &gt; Setup authentificationand fill out your information. Copy the generated YAML into your _config.yml. Once that’s in place, start up your hexo server and going to /admin/ willrequire you to enter your password. 5. Custom post metadataTo add and edit your own post metadata with the admin interface, add themetadata variable and your custom variables to your hexo _config.yml:123metadata: author_id: defaultAuthorId language: You can provide default values that will be used to initialize the metadataof a new post. 6. Contribute! let me know how it can be improved in the githubissues fork and pull-request Creditsbuilt with ❤ by Jared Forsyth(@jaredforsyth) usingreact, browserify, and less.]]></content>
      <categories>
        <category>大家好</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>